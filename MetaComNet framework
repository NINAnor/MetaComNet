# Not run

####################################################################################################################################################################################################
####################################################################################################################################################################################################
##################################									                                								                                                              ##################################
##################################									                                								                                                              ##################################
##################################	R code for reproducing results in: 			                                 								                                      ##################################
##################################	Sydenham et al., MetaComNet: A random forest-based framework for making spatial prediction of plant-pollinator interactions	  ##################################
##################################	> sessionInfo()                                                                                                               ##################################
##################################	R version 4.0.3 (2020-10-10)                                                                                                  ##################################
##################################	Platform: x86_64-pc-linux-gnu (64-bit)                                                                                        ##################################
##################################	Running under: Ubuntu 18.04.6 LTS								                                								                              ##################################
##################################									                                								                                                              ##################################
##################################									                                								                                                              ##################################
####################################################################################################################################################################################################
####################################################################################################################################################################################################

# setwd() remove hashtag and set working directory to the folder where you have stored the supporting data files
# Descriptions of the data files can be found in the readme .txt file associated with the data
# Please note that this script contains parallel processing using the mclapply function AND within carets train function. For running the script without parallell processing, use lapply() instead of mclapply(), and change "allowParallel = TRUE" to "FALSE" in trainControl() 
## NB: not running processes in parallel will result in a significant increase in computation time


library(caret)
library(pROC)
library(parallel)
library(car)
library(MuMIn)
library(effects)
library(pROC)
library(vegan)
library(raster)

######################################################################################################################
######################################################################################################################
##################################								                                              ######################
##################################	Leave-one-out cross-validations: Site-level               	######################
##################################								                                              ######################
######################################################################################################################
######################################################################################################################

	MetaComNetDF <-  read.csv("Sydenham et al MetaComNet data frame.csv")

## Identify all unique site combinations consisting of 15/16 sites  
	AllSiteCombinations <- combn(unique(MetaComNetDF$Site), 15)
	SubSampleID  <- 1:ncol(AllSiteCombinations)

	#create a list of seeds for ensuring consistent results when running models in paralell within caret
	set.seed(123)
	seeds <- vector(mode = "list", length = 6)
	for(i in 1:6) seeds[[i]]<- sample.int(n=1000, 6)
	seeds[[6]]<-sample.int(1000, 6)

## Function for running models and compiling data for leave-one-out cross validation    
    fn.crossValidation <- function(x){
      RepNR <- x
      TrainingDataSites <- AllSiteCombinations[,RepNR]
      EmpTrainData <- MetaComNetDF[MetaComNetDF$Site %in% TrainingDataSites,]
      EmpValData <- MetaComNetDF[!MetaComNetDF$Site %in% TrainingDataSites,]
  

      fit_control <- trainControl(method = "cv",number = 5,classProbs=TRUE,allowParallel = TRUE, seeds = seeds)  
      rf_fitOccurrence <- train(FacOccurrence~
                                        DCA1 + DCA2 + DCA3 + DCA4 + BeeDCA1  +  BeeDCA2  +  BeeDCA3 + BeeDCA4 + Solitary
                                      + PlantFreq			   
                                      + MASL 
                                      + LnscpH
                                      + LndscpGR
                                      + DistSand
                                      +NearestOcc
                                      +RegionalCommonness
                                      , trControl = fit_control,tuneGrid = NULL,importance = 'permutation',num.threads = 12,
                                      data = EmpTrainData, 
                                      method = "ranger")
      
      fit_control <- trainControl(method = "cv",number = 5,allowParallel = TRUE, seeds = seeds)
      
      rf_fitFrequency <- train(Occurrence~
                                     DCA1 + DCA2 + DCA3 + DCA4 + BeeDCA1  +  BeeDCA2  +  BeeDCA3 + BeeDCA4 + Solitary
                                   + PlantFreq			   
                                   + MASL 
                                   + LnscpH
                                   + LndscpGR
                                   + DistSand
                                   +NearestOcc
                                   +RegionalCommonness
                                   , trControl = fit_control,tuneGrid = NULL,importance = 'permutation', num.threads = 12,
                                   data = EmpTrainData, 
                                   method = "ranger")
      
      
      rf_fitNumber <- train(Number~
                               DCA1 + DCA2 + DCA3 + DCA4 + BeeDCA1  +  BeeDCA2  +  BeeDCA3 + BeeDCA4 + Solitary
                             + PlantFreq			   
                             + MASL 
                             + LnscpH
                             + LndscpGR
                             + DistSand
                             +NearestOcc
                             +RegionalCommonness
                             , trControl = fit_control,tuneGrid = NULL,importance = 'permutation', num.threads = 12,
                             data = EmpTrainData, 
                             method = "ranger")
      
      
      dfVarImp <- merge(merge(varImp(rf_fitOccurrence)[[1]],varImp(rf_fitFrequency)[[1]], by = 0),varImp(rf_fitNumber)[[1]],by.x = "Row.names", by.y = 0)
      names(dfVarImp) <- c("Variable","ImpOccurence","ImpFrequency","ImpNumber")
      dfVarImp$RepNR <- rep(RepNR, nrow(dfVarImp))
      
      
      DFPredictionsValidations <- data.frame(
        SitePlant = EmpValData$SitePlant
        ,SitePlantBee = EmpValData$SitePlantBee
        , PredictedOccurrence = predict(rf_fitOccurrence,EmpValData, "prob")[,2]
        , PredictedFrequency = predict(rf_fitFrequency,EmpValData)
        , PredictedNumber = predict(rf_fitNumber,EmpValData)
        , ValidOccurrence = EmpValData$Occurrence
        , ValidNumber = EmpValData$Number
      )
      DFPredictionsValidations$RepNR <- rep(RepNR, nrow(DFPredictionsValidations))
     ListOut <- list(DFPredictionsValidations,dfVarImp)
      
    return(ListOut)}
    


## Run models
    set.seed(1234) 
    ListLeaveOneOutValidations <- mclapply(SubSampleID,fn.crossValidation,mc.cores = 4)

## Assemble model results for validations    
    dfPredValidationsDF <- do.call(rbind,lapply(ListLeaveOneOutValidations, function(x)x[[1]]))
## Assemble model results for assessing variable importance        
    dfPredValidationsVarImp <- do.call(rbind,lapply(ListLeaveOneOutValidations, function(x)x[[2]]))

    OrderForVarImp <- c("RegionalCommonness"
                        ,"NearestOcc"
                        ,"MASL"
                        ,"LndscpGR"
                        ,"LnscpH"
                        ,"DistSand"
                        ,"PlantFreq"
                        ,"DCA1"               
                        ,"DCA2"              
                        ,"DCA3"               
                        ,"DCA4"               
                        ,"BeeDCA1"            
                        ,"BeeDCA2"            
                        ,"BeeDCA3"           
                        ,"BeeDCA4"
                        ,"SolitaryTRUE")
    
    
    dfPredValidationsVarImp$Variable <- factor(dfPredValidationsVarImp$Variable, levels = rev(OrderForVarImp))
    
## Fit logistic GLMs 
    
    glmClassificationOcc  <- glm(ValidOccurrence~logit(PredictedOccurrence, adjust = 0.001),binomial, dfPredValidationsDF)
    glmRegressionOcc  <- glm(ValidOccurrence~logit(PredictedFrequency, adjust = 0.001),binomial, dfPredValidationsDF)
 
        
# For relationships between occurrences of interactions and predicted number of interactions compare three transformations of x
    BIC(
    glm(ValidOccurrence~PredictedNumber,binomial, dfPredValidationsDF)
    ,glm(ValidOccurrence~log1p(PredictedNumber),binomial, dfPredValidationsDF)
    ,glm(ValidOccurrence~sqrt(PredictedNumber),binomial, dfPredValidationsDF))
# using the squareroot transformation results in the lowest BIC
    
    glmNumberOcc  <- glm(ValidOccurrence~sqrt(PredictedNumber),binomial, dfPredValidationsDF)
    

## Function for validating predictions within sites     
fn.getMeanAndSDModelPerformance <- function(x){
    glmClassificationOccSingle  <- glm(ValidOccurrence~logit(PredictedOccurrence, adjust = 0.001),binomial, dfPredValidationsDF[dfPredValidationsDF$RepNR %in% x,])
    glmRegressionOccSingle  <- glm(ValidOccurrence~logit(PredictedFrequency, adjust = 0.001),binomial, dfPredValidationsDF[dfPredValidationsDF$RepNR %in% x,])

    glmNumberOccSingleunTrans  <- glm(ValidOccurrence~PredictedNumber,binomial, dfPredValidationsDF[dfPredValidationsDF$RepNR %in% x,])
    glmNumberOccSingleLOGTrans  <- glm(ValidOccurrence~log1p(PredictedNumber),binomial, dfPredValidationsDF[dfPredValidationsDF$RepNR %in% x,])
    glmNumberOccSingleSQRTTrans  <- glm(ValidOccurrence~sqrt(PredictedNumber),binomial, dfPredValidationsDF[dfPredValidationsDF$RepNR %in% x,])
        
    dfSingleAbundanceLogistics <- data.frame(BIC(glmNumberOccSingleunTrans,glmNumberOccSingleLOGTrans,glmNumberOccSingleSQRTTrans))
    dfSingleAbundanceLogistics$Rsquared <- c(attr(r.squaredLR(glmNumberOccSingleunTrans), "adj.r.squared"),attr(r.squaredLR(glmNumberOccSingleLOGTrans), "adj.r.squared"),attr(r.squaredLR(glmNumberOccSingleSQRTTrans), "adj.r.squared"))
    dfSingleAbundanceLogistics$auc <- as.numeric(auc(ValidOccurrence~PredictedNumber, dfPredValidationsDF[dfPredValidationsDF$RepNR %in% x,]))
    SelectedAbundanceModel <- dfSingleAbundanceLogistics[dfSingleAbundanceLogistics$BIC %in%  min(dfSingleAbundanceLogistics$BIC),]
    
    SingleSiteValidations <-  data.frame(
            Model = c("ClassificationOCC","RegressionOCC","RegressionNumber")
            ,RSquared = c(attr(r.squaredLR(glmClassificationOccSingle), "adj.r.squared"),attr(r.squaredLR(glmRegressionOccSingle), "adj.r.squared"),SelectedAbundanceModel$Rsquared)
            ,AUC = c(as.numeric(auc(ValidOccurrence~PredictedOccurrence, dfPredValidationsDF[dfPredValidationsDF$RepNR %in% x,]))
                    ,as.numeric(auc(ValidOccurrence~PredictedFrequency, dfPredValidationsDF[dfPredValidationsDF$RepNR %in% x,])),SelectedAbundanceModel$auc)
            ,Slope = c(as.numeric(coef(glmClassificationOccSingle)[2]),as.numeric(coef(glmRegressionOccSingle)[2]), NA)
            ,spCor = as.numeric(cor(dfPredValidationsDF[dfPredValidationsDF$RepNR %in% x,c("ValidNumber","PredictedOccurrence", "PredictedFrequency", "PredictedNumber")])[2:4,1]))
            
    return(SingleSiteValidations)}
  




# Get validation metrics for figure legends
dfForSiteLevelCalc <- do.call(rbind,lapply(unique(dfPredValidationsDF$RepNR),fn.getMeanAndSDModelPerformance))

## Classification RF on occurrences/absences
summary(glmClassificationOcc)
r.squaredLR(glmClassificationOcc)
round(auc(ValidOccurrence~PredictedOccurrence, dfPredValidationsDF),2)
round(with(dfForSiteLevelCalc[dfForSiteLevelCalc$Model %in% "ClassificationOCC",], mean(Slope)),2)
round(with(dfForSiteLevelCalc[dfForSiteLevelCalc$Model %in% "ClassificationOCC",], sd(Slope)),2)
round(with(dfForSiteLevelCalc[dfForSiteLevelCalc$Model %in% "ClassificationOCC",], mean(RSquared)),2)
round(with(dfForSiteLevelCalc[dfForSiteLevelCalc$Model %in% "ClassificationOCC",], sd(RSquared)),2)
round(with(dfForSiteLevelCalc[dfForSiteLevelCalc$Model %in% "ClassificationOCC",], mean(AUC)),2)
round(with(dfForSiteLevelCalc[dfForSiteLevelCalc$Model %in% "ClassificationOCC",], sd(AUC)),2)

with(dfPredValidationsDF, cor(PredictedOccurrence,ValidNumber))
round(with(dfForSiteLevelCalc[dfForSiteLevelCalc$Model %in% "ClassificationOCC",], mean(spCor)),2)
round(with(dfForSiteLevelCalc[dfForSiteLevelCalc$Model %in% "ClassificationOCC",], sd(spCor)),2)

## Regression RF on occurrences/absences
summary(glmRegressionOcc)
r.squaredLR(glmRegressionOcc)
round(auc(ValidOccurrence~PredictedFrequency, dfPredValidationsDF),2)
round(with(dfForSiteLevelCalc[dfForSiteLevelCalc$Model %in% "RegressionOCC",], mean(Slope)),2)
round(with(dfForSiteLevelCalc[dfForSiteLevelCalc$Model %in% "RegressionOCC",], sd(Slope)),2)
round(with(dfForSiteLevelCalc[dfForSiteLevelCalc$Model %in% "RegressionOCC",], mean(RSquared)),2)
round(with(dfForSiteLevelCalc[dfForSiteLevelCalc$Model %in% "RegressionOCC",], sd(RSquared)),2)
round(with(dfForSiteLevelCalc[dfForSiteLevelCalc$Model %in% "RegressionOCC",], mean(AUC)),2)
round(with(dfForSiteLevelCalc[dfForSiteLevelCalc$Model %in% "RegressionOCC",], sd(AUC)),2)

with(dfPredValidationsDF, cor(PredictedFrequency,ValidNumber))
round(with(dfForSiteLevelCalc[dfForSiteLevelCalc$Model %in% "RegressionOCC",], mean(spCor)),2)
round(with(dfForSiteLevelCalc[dfForSiteLevelCalc$Model %in% "RegressionOCC",], sd(spCor)),2)

## Regression RF on number of interactions
r.squaredLR(glmNumberOcc)
round(auc(ValidOccurrence~PredictedNumber, dfPredValidationsDF),2)
round(with(dfForSiteLevelCalc[dfForSiteLevelCalc$Model %in% "RegressionNumber",], mean(RSquared)),2)
round(with(dfForSiteLevelCalc[dfForSiteLevelCalc$Model %in% "RegressionNumber",], sd(RSquared)),2)
round(with(dfForSiteLevelCalc[dfForSiteLevelCalc$Model %in% "RegressionNumber",], mean(AUC)),2)
round(with(dfForSiteLevelCalc[dfForSiteLevelCalc$Model %in% "RegressionNumber",], sd(AUC)),2)

with(dfPredValidationsDF, cor(PredictedNumber,ValidNumber))
round(with(dfForSiteLevelCalc[dfForSiteLevelCalc$Model %in% "RegressionNumber",], mean(spCor)),2)
round(with(dfForSiteLevelCalc[dfForSiteLevelCalc$Model %in% "RegressionNumber",], sd(spCor)),2)


### PLOT FIGURE 2 ###

bmp("Figure 2.tif",width = 10.5, height = 10, units = "in", res = 300)

    par(mfrow = c(3,3), mar = c(5,5,3,1), cex.lab = 1.2)

    plot(1,ylim = c(0,1),xlim = c(0,max(dfPredValidationsDF$PredictedOccurrence)),type = 'n', xlab = "Predicted prob. of interactions", ylab = "Occurrence of plant-bee interaction")
    lines(seq(0,max(dfPredValidationsDF$PredictedOccurrence), by = 0.01), seq(0,max(dfPredValidationsDF$PredictedOccurrence), by = 0.01), lty = 2, lwd =2)
    points(jitter(ValidOccurrence,0.1)~PredictedOccurrence,dfPredValidationsDF, col = rgb(1,0,0,0.2))
    with(data.frame(allEffects(glmClassificationOcc, xlevels = 100)[[1]]),polygon(x = c(PredictedOccurrence, rev(PredictedOccurrence)),
            y = c(lower, rev(upper)),
            col =  rgb(0,0,1, 0.2), border = NA))
    with(data.frame(allEffects(glmClassificationOcc, xlevels = 100)[[1]]), lines(fit~PredictedOccurrence, lwd = 2))

    legend(x = 0, y = 1, legend = c(
      expression(Slope~ "= 1.21" ~ "\u00B1" ~ "0.05 se")
      ,expression(R^2 ~ "= 0.29")
      ,expression(AUC ~ "= 0.88")
      ,Slope[site]~ "= 1.35" ~ "\u00B1" ~ "0.56 sd"
      ,R[site]^2~ "= 0.31" ~ "\u00B1" ~ "0.12 sd"
      ,AUC[site]~ "= 0.88" ~ "\u00B1" ~ "0.07 sd"
    ), bty = 'n', cex = 0.8)
    mtext("A", 3, 1, adj = 0)

    plot(as.numeric(factor(ValidNumber))~PredictedOccurrence,dfPredValidationsDF,xlim = c(0,.6), col = 'red', pch = 16, axes = FALSE, xlab = "Predicted prob. of interactions", ylab = "Number of plant-bee interactions", yaxt = "n", xaxt = "n")
    plot(PredictedOccurrence~factor(ValidNumber),dfPredValidationsDF, yaxt = "n", xaxt = "n", horizontal = TRUE, ylab = "", xlab = "", col = rgb(1,1,1,0.5), add =TRUE)
    axis(1, at = seq(0,1, by = 0.1))
    axis(2, at =1:length(sort(unique(dfPredValidationsDF$ValidNumber))), labels = sort(unique(dfPredValidationsDF$ValidNumber)), las = 2,cex.axis = 0.8)
    
    legend("topleft", legend = c(
      expression("r = 0.30")
      ,r[site]~ "= 0.33" ~ "\u00B1" ~ "0.08 sd"
    ), bty = 'n', cex = 0.8)
    mtext("B", 3, 1, adj = 0)

    par(mar = c(5,8,3,1))
    boxplot(ImpOccurence~Variable,dfPredValidationsVarImp,horizontal = TRUE, las = 2, ylab = "", xlab = "Variable importance", yaxt = "n", xaxt = "n")
    axis(1)
    renamedVariables <- c("Regional commonness"
                          ,"Distance conspecific"
                          ,"Elevation"
                          ,"Grassland 250m"
                          ,"Lndscp H 250m"
                          ,"Distance sand"
                          ,"Plant abundance"
                          ,"Plant DCA1"
                          ,"Plant DCA2"
                          ,"Plant DCA3"
                          ,"Plant DCA4"
                          ,"Bee DCA1"
                          ,"Bee DCA2"
                          ,"Bee DCA3"
                          ,"Bee DCA4"
                          ,"Bee Sociality")
    axis(2,at = 1:16, labels = rev(renamedVariables), las = 2,cex.axis = 0.8)
    mtext("C", 3, 1, adj = 0)
    
    par(mar = c(5,5,3,1))
    plot(1,ylim = c(0,1),xlim = c(0,0.8),type = 'n', xlab = "Predicted freq. of interactions", ylab = "Occurrence of plant-bee interaction")
    lines(seq(0,.8, by = 0.01), seq(0,.8, by = 0.01), lty = 2, lwd =2)
    points(jitter(ValidOccurrence,0.1)~PredictedFrequency,dfPredValidationsDF, col = rgb(1,0,0,0.2))
    with(data.frame(allEffects(glmRegressionOcc, xlevels = 100)[[1]]),polygon(x = c(PredictedFrequency, rev(PredictedFrequency)),
                                                                                  y = c(lower, rev(upper)),
                                                                                  col =  rgb(0,0,1, 0.2), border = NA))
    with(data.frame(allEffects(glmRegressionOcc, xlevels = 100)[[1]]), lines(fit~PredictedFrequency, lwd = 2))

    
    legend(x = 0, y = 1, legend = c(
      expression(Slope~ "= 1.09" ~ "\u00B1" ~ "0.04 se")
      ,expression(R^2 ~ "= 0.30")
      ,expression(AUC ~ "= 0.88")
      ,Slope[site]~ "= 1.22" ~ "\u00B1" ~ "0.44 sd"
      ,R[site]^2~ "= 0.32" ~ "\u00B1" ~ "0.12 sd"
      ,AUC[site]~ "= 0.88" ~ "\u00B1" ~ "0.06 sd"
    ), bty = 'n', cex = 0.8)
    mtext("D", 3, 1, adj = 0)
    

    plot(as.numeric(factor(ValidNumber))~PredictedFrequency,dfPredValidationsDF,xlim = c(0,.8), col = 'red', pch = 16, axes = FALSE, xlab = "Predicted freq. of interactions", ylab = "Number of plant-bee interactions", yaxt = "n", xaxt = "n")
    plot(PredictedFrequency~factor(ValidNumber),dfPredValidationsDF, yaxt = "n", xaxt = "n", horizontal = TRUE, ylab = "", xlab = "", col = rgb(1,1,1,0.5), add =TRUE)
    axis(1, at = seq(0,1, by = 0.1))
    axis(2, at =1:length(sort(unique(dfPredValidationsDF$ValidNumber))), labels = sort(unique(dfPredValidationsDF$ValidNumber)), las = 2,cex.axis = 0.8)
    
    
    
    legend("topleft", legend = c(
      expression("r = 0.32")
      ,r[site]~ "= 0.34" ~ "\u00B1" ~ "0.09 sd"
    ), bty = 'n', cex = 0.8)

    mtext("E", 3, 1, adj = 0)

    par(mar = c(5,8,3,1))
    boxplot(ImpFrequency~Variable,dfPredValidationsVarImp,horizontal = TRUE, las = 2, ylab = "", xlab = "Variable importance", yaxt = "n", xaxt = "n")
    axis(1)
    
    renamedVariables <- c("Regional commonness"
                          ,"Distance conspecific"
                          ,"Elevation"
                          ,"Grassland 250m"
                          ,"Lndscp H 250m"
                          ,"Distance sand"
                          ,"Plant abundance"
                          ,"Plant DCA1"
                          ,"Plant DCA2"
                          ,"Plant DCA3"
                          ,"Plant DCA4"
                          ,"Bee DCA1"
                          ,"Bee DCA2"
                          ,"Bee DCA3"
                          ,"Bee DCA4"
                          ,"Bee Sociality")
    axis(2,at = 1:16, labels = rev(renamedVariables), las = 2,cex.axis = 0.8)
    
    mtext("F", 3, 1, adj = 0)
    
    par(mar = c(5,5,3,1))
    plot(1,ylim = c(0,1),xlim = c(0,8),type = 'n', xlab = "Predicted number of interactions", ylab = "Occurrence of plant-bee interaction")
    dfIdealizedGLM <- data.frame(Presence = do.call(c,lapply(seq(0,8, 0.0001), function(x)rbinom(1,1,x))), Probability = seq(0,8, 0.0001))
    dfIdealizedGLM$Presence[is.na(dfIdealizedGLM$Presence)] <- 1
    
    IdealGLMBinomial <- glm(Presence~Probability,binomial,dfIdealizedGLM)
    allEffIdealGLM <- data.frame(allEffects(IdealGLMBinomial, xlevels = 100)[[1]])
    with(allEffIdealGLM, lines(fit~Probability, lty = 2, lwd = 2))
    

      points(jitter(ValidOccurrence,0.1)~PredictedNumber,dfPredValidationsDF, col = rgb(1,0,0,0.2))
      with(data.frame(allEffects(glmNumberOcc, xlevels = 100)[[1]]),polygon(x = c(PredictedNumber, rev(PredictedNumber)),
                                                                              y = c(lower, rev(upper)),
                                                                              col =  rgb(0,0,1, 0.2), border = NA))
      with(data.frame(allEffects(glmNumberOcc, xlevels = 100)[[1]]), lines(fit~PredictedNumber, lwd = 2))

    legend(x = 4, y = 1, legend = c(
        expression(R^2 ~ "= 0.23")
        ,expression(AUC ~ "= 0.86")
        ,R[site]^2~ "= 0.25" ~ "\u00B1" ~ "0.12 sd"
        ,AUC[site]~ "= 0.87" ~ "\u00B1" ~ "0.06 sd"
      ), bty = 'n', cex = 0.8)
    mtext("G", 3, 1, adj = 0)

    
        plot(as.numeric(factor(ValidNumber))~PredictedNumber,dfPredValidationsDF,xlim = c(0,8), col = 'red', pch = 16, axes = FALSE, xlab = "Predicted number of interactions", ylab = "Number of plant-bee interactions", yaxt = "n", xaxt = "n")
        plot(PredictedNumber~factor(ValidNumber),dfPredValidationsDF, yaxt = "n", xaxt = "n", horizontal = TRUE, ylab = "", xlab = "", col = rgb(1,1,1,0.5), add =TRUE)
      axis(1, at = seq(0,8, by = 1))
      axis(2, at =1:length(sort(unique(dfPredValidationsDF$ValidNumber))), labels = sort(unique(dfPredValidationsDF$ValidNumber)), las = 2,cex.axis = 0.8)
      legend("topright", legend = c(
        expression("r = 0.29")
        ,r[site]~ "= 0.31" ~ "\u00B1" ~ "0.15 sd"
      ), bty = 'n', cex = 0.8)
    mtext("H", 3, 1, adj = 0)
    par(mar = c(5,8,3,1))
    boxplot(ImpNumber~Variable,dfPredValidationsVarImp,horizontal = TRUE, las = 2, ylab = "", xlab = "Variable importance", yaxt = "n", xaxt = "n")
    axis(1)

    renamedVariables <- c("Regional commonness"
                          ,"Distance conspecific"
                          ,"Elevation"
                          ,"Grassland 250m"
                          ,"Lndscp H 250m"
                          ,"Distance sand"
                          ,"Plant abundance"
                          ,"Plant DCA1"
                          ,"Plant DCA2"
                          ,"Plant DCA3"
                          ,"Plant DCA4"
                          ,"Bee DCA1"
                          ,"Bee DCA2"
                          ,"Bee DCA3"
                          ,"Bee DCA4"
                          ,"Bee Sociality")
    axis(2,at = 1:16, labels = rev(renamedVariables), las = 2,cex.axis = 0.8)

    mtext("I", 3, 1, adj = 0)
    
    
    dev.off()
    

    ##########################################################################################################################
    ##########################################################################################################################
    ##################################								                                                                    ####
    ##################################	Correlations between observed and predicted flower-visitor diversity for fig. 3   ####
    ##################################								                                                                    ####
    ##########################################################################################################################
    ##########################################################################################################################    
    

    SitePlantVals <- aggregate(ValidOccurrence~SitePlant,dfPredValidationsDF, FUN = sum)
    SitePlantVals$ObsDiversity <- aggregate(ValidNumber~SitePlant,dfPredValidationsDF, FUN = diversity)[,2]
    SitePlantVals$ObsAbundance <- aggregate(ValidNumber~SitePlant,dfPredValidationsDF, FUN = sum)[,2]
    SitePlantVals$PredSROccClas <- aggregate(PredictedOccurrence~SitePlant,dfPredValidationsDF, FUN = sum)[,2]
    SitePlantVals$PredSROccFreq <- aggregate(PredictedFrequency~SitePlant,dfPredValidationsDF, FUN = sum)[,2]
    SitePlantVals$PredAbun <- aggregate(PredictedNumber~SitePlant,dfPredValidationsDF, FUN = sum)[,2]
 

## Get Correlation coefficents between observed species richness, diversity, and abundance of flower visitors and predicted values       
    with(SitePlantVals,cor(PredSROccClas,ValidOccurrence))
    with(SitePlantVals,cor(PredSROccClas,ObsDiversity))
    with(SitePlantVals,cor(PredSROccClas,ObsAbundance))

    with(SitePlantVals,cor(PredSROccFreq,ValidOccurrence))
    with(SitePlantVals,cor(PredSROccFreq,ObsDiversity))
    with(SitePlantVals,cor(PredSROccFreq,ObsAbundance))
    
    with(SitePlantVals,cor(PredAbun,ValidOccurrence))
    with(SitePlantVals,cor(PredAbun,ObsDiversity))
    with(SitePlantVals,cor(PredAbun,ObsAbundance))
    
    bmp("Figure 3.tif",width = 9, height = 9, units = "in", res = 300)
    par(mfrow = c(3,3), mar = c(4,5,3,1), cex.lab = 1.5)

    plot(as.numeric(factor(ValidOccurrence))~PredSROccClas,SitePlantVals, col = 'red', pch = 16, axes = FALSE, xlab = "Predicted bee richness (Prob)", ylab = "Flower-visitor richness", yaxt = "n", xaxt = "n")
    plot(PredSROccClas~factor(ValidOccurrence),SitePlantVals, yaxt = "n", xaxt = "n", horizontal = TRUE, ylab = "", xlab = "", col = rgb(1,1,1,0.5), add =TRUE)
      axis(1, at = seq(0,12, by = 1))
      axis(2, at =1:length(sort(unique(SitePlantVals$ValidOccurrence))), labels = sort(unique(SitePlantVals$ValidOccurrence)), las = 2)
      legend("topright", legend = c(
        expression(r~ "= 0.50")
      ), bty = 'n')
      mtext("A", 3, 1, adj = 0)

      plot(as.numeric(factor(round(ObsDiversity,1)))~PredSROccClas,SitePlantVals, col = 'red', pch = 16, axes = FALSE, xlab = "Predicted bee richness (Prob)", ylab = "Flower-visitor diversity", yaxt = "n", xaxt = "n")
      plot(PredSROccClas~factor(round(ObsDiversity,1)),SitePlantVals, yaxt = "n", xaxt = "n", horizontal = TRUE, ylab = "", xlab = "", col = rgb(1,1,1,0.5), add =TRUE)
      axis(1, at = seq(0,12, by = 1))
      axis(2, at =1:length(sort(unique(round(SitePlantVals$ObsDiversity,1)))), labels = sort(unique(round(SitePlantVals$ObsDiversity,1))), las = 2)
      legend("topright", legend = c(
        expression(r~ "= 0.49")
        ), bty = 'n')
      mtext("B", 3, 1, adj = 0)
    
      plot(as.numeric(factor(ObsAbundance))~PredSROccClas,SitePlantVals, col = 'red', pch = 16, axes = FALSE, xlab = "Predicted bee richness (Prob)", ylab = "Flower-visitor abundance", yaxt = "n", xaxt = "n")
      plot(PredSROccClas~factor(ObsAbundance),SitePlantVals, yaxt = "n", xaxt = "n", horizontal = TRUE, ylab = "", xlab = "", col = rgb(1,1,1,0.5), add =TRUE)
    axis(1, at = seq(0,12, by = 1))
    axis(2, at =1:length(sort(unique(SitePlantVals$ObsAbundance))), labels = sort(unique(SitePlantVals$ObsAbundance)), las = 2, cex.axis = 0.75)
    legend("topleft", legend = c(
      expression(r~ "= 0.40")
    ), bty = 'n')
    mtext("C", 3, 1, adj = 0)
    
    plot(as.numeric(factor(ValidOccurrence))~PredSROccFreq,SitePlantVals, col = 'red', pch = 16, axes = FALSE, xlab = "Predicted bee richness (Freq)", ylab = "Flower-visitor richness", yaxt = "n", xaxt = "n")
    plot(PredSROccFreq~factor(ValidOccurrence),SitePlantVals, yaxt = "n", xaxt = "n", horizontal = TRUE, ylab = "", xlab = "", col = rgb(1,1,1,0.5), add =TRUE)
    axis(1, at = seq(0,12, by = 1))
    axis(2, at =1:length(sort(unique(SitePlantVals$ValidOccurrence))), labels = sort(unique(SitePlantVals$ValidOccurrence)), las = 2)
    legend("topright", legend = c(
      expression(r~ "= 0.50")
    ), bty = 'n')
    mtext("D", 3, 1, adj = 0)
    
    plot(as.numeric(factor(round(ObsDiversity,1)))~PredSROccFreq,SitePlantVals, col = 'red', pch = 16, axes = FALSE, xlab = "Predicted bee richness (Freq)", ylab = "Flower-visitor diversity", yaxt = "n", xaxt = "n")
    plot(PredSROccFreq~factor(round(ObsDiversity,1)),SitePlantVals, yaxt = "n", xaxt = "n", horizontal = TRUE, ylab = "", xlab = "", col = rgb(1,1,1,0.5), add =TRUE)
    axis(1, at = seq(0,12, by = 1))
    axis(2, at =1:length(sort(unique(round(SitePlantVals$ObsDiversity,1)))), labels = sort(unique(round(SitePlantVals$ObsDiversity,1))), las = 2)
    legend("topright", legend = c(
      expression(r~ "= 0.48")
    ), bty = 'n')
    mtext("E", 3, 1, adj = 0)
    
    plot(as.numeric(factor(ObsAbundance))~PredSROccFreq,SitePlantVals, col = 'red', pch = 16, axes = FALSE, xlab = "Predicted bee richness (Freq)", ylab = "Flower-visitor abundance", yaxt = "n", xaxt = "n")
    plot(PredSROccFreq~factor(ObsAbundance),SitePlantVals, yaxt = "n", xaxt = "n", horizontal = TRUE, ylab = "", xlab = "", col = rgb(1,1,1,0.5), add =TRUE)
        axis(1, at = seq(0,12, by = 1))
    axis(2, at =1:length(sort(unique(SitePlantVals$ObsAbundance))), labels = sort(unique(SitePlantVals$ObsAbundance)), las = 2, cex.axis = 0.75)
    legend("topleft", legend = c(
      expression(r~ "= 0.42")
    ), bty = 'n')
    mtext("F", 3, 1, adj = 0)
    

    plot(as.numeric(factor(ValidOccurrence))~PredAbun,SitePlantVals, col = 'red', pch = 16, axes = FALSE, xlab = "Predicted bee abundance", ylab = "Flower-visitor richness", yaxt = "n", xaxt = "n")
    plot(PredAbun~factor(ValidOccurrence),SitePlantVals, yaxt = "n", xaxt = "n", horizontal = TRUE, ylab = "", xlab = "", col = rgb(1,1,1,0.5), add =TRUE)
    axis(1)
    axis(2, at =1:length(sort(unique(SitePlantVals$ValidOccurrence))), labels = sort(unique(SitePlantVals$ValidOccurrence)), las = 2)
    legend("topright", legend = c(
      expression(r~ "= 0.34")
    ), bty = 'n')
    mtext("G", 3, 1, adj = 0)
    
    plot(as.numeric(factor(round(ObsDiversity,1)))~PredAbun,SitePlantVals, col = 'red', pch = 16, axes = FALSE, xlab = "Predicted bee abundance", ylab = "Flower-visitor diversity", yaxt = "n", xaxt = "n")
    plot(PredAbun~factor(round(ObsDiversity,1)),SitePlantVals, yaxt = "n", xaxt = "n", horizontal = TRUE, ylab = "", xlab = "", col = rgb(1,1,1,0.5), add =TRUE)
    axis(1)
    axis(2, at =1:length(sort(unique(round(SitePlantVals$ObsDiversity,1)))), labels = sort(unique(round(SitePlantVals$ObsDiversity,1))), las = 2)
    legend("topright", legend = c(
      expression(r~ "= 0.33")
    ), bty = 'n')
    mtext("H", 3, 1, adj = 0)

    plot(as.numeric(factor(ObsAbundance))~PredAbun,SitePlantVals, col = 'red', pch = 16, axes = FALSE, xlab = "Predicted bee abundance", ylab = "Flower visitor abundance", yaxt = "n", xaxt = "n")
    plot(PredAbun~factor(ObsAbundance),SitePlantVals, yaxt = "n", xaxt = "n", horizontal = TRUE, ylab = "", xlab = "", col = rgb(1,1,1,0.5), add =TRUE)
    axis(1)
    axis(2, at =1:length(sort(unique(SitePlantVals$ObsAbundance))), labels = sort(unique(SitePlantVals$ObsAbundance)), las = 2, cex.axis = 0.75)
    legend("topright", legend = c(
      expression(r~ "= 0.33")
    ), bty = 'n')
    mtext("I", 3, 1, adj = 0)
    

    dev.off()
    

    ######################################################################################################################
    ######################################################################################################################
    ##################################								                                                          ##########
    ##################################	Leave-one-out cross-validations: Bee species-level for Fig. S2         	##########
    ##################################								                                                          ##########
    ######################################################################################################################
    ######################################################################################################################    
    

    
    UniqueBeeSpecies <- unique(do.call(rbind,strsplit(MetaComNetDF$SiteBee,"_"))[,2])
    MetaComNetDF$BeeSpecies <- do.call(rbind,strsplit(MetaComNetDF$SiteBee,"_"))[,2]

    #create a list of seeds for ensuring consistent results when running models in paralell within caret
    set.seed(123)
    seeds <- vector(mode = "list", length = 6)
    for(i in 1:6) seeds[[i]]<- sample.int(n=1000, 6)
    seeds[[6]]<-sample.int(1000, 6)
    
    fn.SingleBeeSpeciesModel <- function(x){
      BeeSpecies2Predict <-  x
      ValidationRows <- MetaComNetDF[MetaComNetDF$BeeSpecies %in% BeeSpecies2Predict,] 
      TrainingRows <- MetaComNetDF[!MetaComNetDF$BeeSpecies %in% BeeSpecies2Predict,] 
      
 
      fit_control <- trainControl(method = "cv",number = 5,classProbs=TRUE,allowParallel = TRUE, seeds = seeds)  
      rf_fitOccurrence <- train(FacOccurrence~
                                        DCA1 + DCA2 + DCA3 + DCA4 + BeeDCA1  +  BeeDCA2  +  BeeDCA3 + BeeDCA4 + Solitary
                                      + PlantFreq			   
                                      + MASL 
                                      + LnscpH
                                      + LndscpGR
                                      + DistSand
                                      +NearestOcc
                                      +RegionalCommonness
                                      , trControl = fit_control,tuneGrid = NULL,importance = 'permutation',num.threads = 12,
                                      data = TrainingRows, 
                                      method = "ranger")

      fit_control <- trainControl(method = "cv",number = 5,allowParallel = TRUE, seeds = seeds)
      
      rf_fitFrequency <- train(Occurrence~
                                     DCA1 + DCA2 + DCA3 + DCA4 + BeeDCA1  +  BeeDCA2  +  BeeDCA3 + BeeDCA4 + Solitary
                                   + PlantFreq			   
                                   + MASL 
                                   + LnscpH
                                   + LndscpGR
                                   + DistSand
                                   +NearestOcc
                                   +RegionalCommonness
                                   , trControl = fit_control,tuneGrid = NULL,importance = 'permutation', num.threads = 12,
                                   data = TrainingRows, 
                                   method = "ranger")
      
      
      rf_fitNumber <- train(Number~
                               DCA1 + DCA2 + DCA3 + DCA4 + BeeDCA1  +  BeeDCA2  +  BeeDCA3 + BeeDCA4 + Solitary
                             + PlantFreq			   
                             + MASL 
                             + LnscpH
                             + LndscpGR
                             + DistSand
                             +NearestOcc
                             +RegionalCommonness
                             , trControl = fit_control,tuneGrid = NULL,importance = 'permutation', num.threads = 12,
                             data = TrainingRows, 
                             method = "ranger")
      

                ObsvsPredicted <- data.frame(SitePlantBee = ValidationRows$SitePlantBee
                                        , ObsOc = ValidationRows$Occurrence
                                        , ObsNum = ValidationRows$Number
                                        , PredictedOccClassification = predict(rf_fitOccurrence,ValidationRows, "prob")[,2]
                                        , PredictedOccRegression = predict(rf_fitFrequency,ValidationRows)
                                        , PredictedNumberRegression = predict(rf_fitNumber,ValidationRows)
                                        )
      return(ObsvsPredicted)}

## Run models and collate data for analyses and producing figures   
   set.seed(1234)
   ListSingleBeeSpeciesValidations <- mclapply(UniqueBeeSpecies, fn.SingleBeeSpeciesModel, mc.cores = 4)

    
    dfSingleBeeSpeciesVals   <-   do.call(rbind,ListSingleBeeSpeciesValidations)
    

    glmSingleBeeClassificationOcc    <- glm(ObsOc~logit(PredictedOccClassification, adjust = 0.001),binomial,dfSingleBeeSpeciesVals)
    glmSingleBeeRegressionOcc    <- glm(ObsOc~logit(PredictedOccRegression, adjust = 0.001),binomial,dfSingleBeeSpeciesVals)

    BIC(glm(ObsOc~PredictedNumberRegression,binomial,dfSingleBeeSpeciesVals)
        ,glm(ObsOc~log1p(PredictedNumberRegression),binomial,dfSingleBeeSpeciesVals)
        ,glm(ObsOc~sqrt(PredictedNumberRegression),binomial,dfSingleBeeSpeciesVals))
    
        glmSingleBeeRegressionNum    <- glm(ObsOc~sqrt(PredictedNumberRegression),binomial,dfSingleBeeSpeciesVals)


# Get validation metrics for figure legends
## Classification RF on occurrences/absences
    summary(glmSingleBeeClassificationOcc)
    r.squaredLR(glmSingleBeeClassificationOcc)
    auc(ObsOc~PredictedOccClassification,dfSingleBeeSpeciesVals)    

    with(dfSingleBeeSpeciesVals, cor(PredictedOccClassification,ObsNum))
    
## Regression RF on occurrences/absences
    summary(glmSingleBeeRegressionOcc)
    r.squaredLR(glmSingleBeeRegressionOcc)
    auc(ObsOc~PredictedOccRegression,dfSingleBeeSpeciesVals)

    with(dfSingleBeeSpeciesVals, cor(PredictedOccRegression,ObsNum))

## Regression RF on number of interactions    
    r.squaredLR(glmSingleBeeRegressionNum)
    auc(ObsOc~PredictedNumberRegression,dfSingleBeeSpeciesVals)
    
    with(dfSingleBeeSpeciesVals, cor(PredictedNumberRegression,ObsNum))
############# PLOT SINGLE BEE SPECIES VALIDATIONS ##############
bmp("Figure S2.tif",width = 8, height = 10, units = "in", res = 300)
par(mfrow = c(3,2), mar = c(5,5,3,1), cex.lab = 1.5)
plot(1,ylim = c(0,1),xlim = c(0,0.6),type = 'n', xlab = "Predicted prob. of interactions", ylab = "Occurrence of bee species")
lines(seq(0,.6, by = 0.01), seq(0,.6, by = 0.01), lty = 2, lwd =2)
points(jitter(ObsOc,0.1)~PredictedOccClassification,dfSingleBeeSpeciesVals, col = rgb(1,0,0,0.2))
with(data.frame(allEffects(glmSingleBeeClassificationOcc, xlevels = 100)[[1]]),polygon(x = c(PredictedOccClassification, rev(PredictedOccClassification)),
                                                                                   y = c(lower, rev(upper)),
                                                                                   col =  rgb(0,0,1, 0.2), border = NA))
with(data.frame(allEffects(glmSingleBeeClassificationOcc, xlevels = 100)[[1]]), lines(fit~PredictedOccClassification, lwd = 2))

legend(x = 0, y = 1, legend = c(
  expression(Slope~ "= 1.05" ~ "\u00B1" ~ "0.05 se")
  ,expression(R^2 ~ "= 0.22")
  ,expression(AUC ~ "= 0.84")
), bty = 'n')
mtext("A", 3, 1, adj = 0)

plot(as.numeric(factor(ObsNum))~PredictedOccClassification,dfSingleBeeSpeciesVals, col = 'red', pch = 16, axes = FALSE, xlab = "Predicted prob. of interactions", ylab = "Number of plant-bee interactions")
plot(PredictedOccClassification~factor(ObsNum),dfSingleBeeSpeciesVals, ylim = c(0,.6), yaxt = "n", xaxt = "n", horizontal = TRUE, ylab = "", xlab = "", col = rgb(1,1,1,0.5), add =TRUE)
axis(1, at = seq(0,1, by = 0.1))
axis(2, at =1:length(sort(unique(dfSingleBeeSpeciesVals$ObsNum))), labels = sort(unique(dfSingleBeeSpeciesVals$ObsNum)), las = 2)
legend("topleft", legend = c(
  expression("r = 0.25")
), bty = 'n')
mtext("B", 3, 1, adj = 0)



#### Frequency of interactions ####

plot(1,ylim = c(0,1),xlim = c(0,0.6),type = 'n', xlab = "Predicted freq. of interactions", ylab = "Occurrence of bee species")
lines(seq(0,.6, by = 0.01), seq(0,.6, by = 0.01), lty = 2, lwd =2)
points(jitter(ObsOc,0.1)~PredictedOccRegression,dfSingleBeeSpeciesVals, col = rgb(1,0,0,0.2))
with(data.frame(allEffects(glmSingleBeeRegressionOcc, xlevels = 100)[[1]]),polygon(x = c(PredictedOccRegression, rev(PredictedOccRegression)),
                                                                              y = c(lower, rev(upper)),
                                                                              col =  rgb(0,0,1, 0.2), border = NA))
with(data.frame(allEffects(glmSingleBeeRegressionOcc, xlevels = 100)[[1]]), lines(fit~PredictedOccRegression, lwd = 2))


legend(x = 0, y = 1, legend = c(
  expression(Slope~ "= 1.01" ~ "\u00B1" ~ "0.05 se")
  ,expression(R^2 ~ "= 0.23")
  ,expression(AUC ~ "= 0.85")
), bty = 'n')
mtext("C", 3, 1, adj = 0)

plot(as.numeric(factor(ObsNum))~PredictedOccRegression,dfSingleBeeSpeciesVals, col = 'red', pch = 16, axes = FALSE, xlab = "Predicted freq. of interactions", ylab = "Number of plant-bee interactions")
plot(PredictedOccRegression~factor(ObsNum),dfSingleBeeSpeciesVals, ylim = c(0,.6), yaxt = "n", xaxt = "n", horizontal = TRUE, ylab = "", xlab = "", col = rgb(1,1,1,0.5), add =TRUE)
axis(1, at = seq(0,1, by = 0.1))
axis(2, at =1:length(sort(unique(dfSingleBeeSpeciesVals$ObsNum))), labels = sort(unique(dfSingleBeeSpeciesVals$ObsNum)), las = 2)

legend("topleft", legend = c(
  expression("r = 0.26")
), bty = 'n')
mtext("D", 3, 1, adj = 0)

# Number of interactions

plot(1,ylim = c(0,1),xlim = c(0,12),type = 'n', xlab = "Predicted number of interactions", ylab = "Occurrence of bee species")
dfIdealizedGLM <- data.frame(Presence = do.call(c,lapply(seq(0,8, 0.0001), function(x)rbinom(1,1,x))), Probability = seq(0,8, 0.0001))
dfIdealizedGLM$Presence[is.na(dfIdealizedGLM$Presence)] <- 1

IdealGLMBinomial <- glm(Presence~Probability,binomial,dfIdealizedGLM)
allEffIdealGLM <- data.frame(allEffects(IdealGLMBinomial, xlevels = 100)[[1]])
with(allEffIdealGLM, lines(fit~Probability, lty = 2, lwd = 2))
points(jitter(ObsOc,0.1)~PredictedNumberRegression,dfSingleBeeSpeciesVals, col = rgb(1,0,0,0.2))
with(data.frame(allEffects(glmSingleBeeRegressionNum, xlevels = 100)[[1]]),polygon(x = c(PredictedNumberRegression, rev(PredictedNumberRegression)),
                                                                                   y = c(lower, rev(upper)),
                                                                                   col =  rgb(0,0,1, 0.2), border = NA))
with(data.frame(allEffects(glmSingleBeeRegressionNum, xlevels = 100)[[1]]), lines(fit~PredictedNumberRegression, lwd = 2))


legend(x = 7, y = 1, legend = c(
  expression(R^2 ~ "= 0.17")
  ,expression(AUC ~ "= 0.84")
), bty = 'n')
mtext("E", 3, 1, adj = 0)

plot(as.numeric(factor(ObsNum))~PredictedNumberRegression,dfSingleBeeSpeciesVals, col = 'red', pch = 16, axes = FALSE, xlab = "Predicted number of interactions", ylab = "Number of plant-bee interactions")
plot(PredictedNumberRegression~factor(ObsNum),dfSingleBeeSpeciesVals, ylim = c(0,11), yaxt = "n", xaxt = "n", horizontal = TRUE, ylab = "", xlab = "", col = rgb(1,1,1,0.5), add =TRUE)
axis(1, at = seq(0,11, by = 1))
axis(2, at =1:length(sort(unique(dfSingleBeeSpeciesVals$ObsNum))), labels = sort(unique(dfSingleBeeSpeciesVals$ObsNum)), las = 2)

legend("topright", legend = c(
  expression("r = 0.25")
), bty = 'n')
mtext("F", 3, 1, adj = 0)

dev.off()


######################################################################################################################
######################################################################################################################
##################################								                                                          ##########
##################################	Leave-one-out cross-validations: Plant species-level for Fig. S3       	##########
##################################								                                                          ##########
######################################################################################################################
######################################################################################################################    

#create a list of seeds for ensuring consistent results when running models in paralell within caret
set.seed(123)
seeds <- vector(mode = "list", length = 6)
for(i in 1:6) seeds[[i]]<- sample.int(n=1000, 6)
seeds[[6]]<-sample.int(1000, 6)    


MetaComNetDF$Plant <- do.call(c,lapply(strsplit(MetaComNetDF$SitePlant,"_"), function(x)x[2]))


UniquePlantSpecies <- unique(MetaComNetDF$Plant)
UniquePlantSpecies

fn.SinglePlantSpeciesModel <- function(x){
  PlantSpecies2Predict <-  x
  ValidationRows <- MetaComNetDF[MetaComNetDF$Plant %in% PlantSpecies2Predict,] 
  TrainingRows <- MetaComNetDF[!MetaComNetDF$Plant %in% PlantSpecies2Predict,] 
  
  
  fit_control <- trainControl(method = "cv",number = 5,classProbs=TRUE,allowParallel = TRUE, seeds = seeds)  
  rf_fitOccurrence <- train(FacOccurrence~
                                    DCA1 + DCA2 + DCA3 + DCA4 + BeeDCA1  +  BeeDCA2  +  BeeDCA3 + BeeDCA4 + Solitary
                                  + PlantFreq			   
                                  + MASL 
                                  + LnscpH
                                  + LndscpGR
                                  + DistSand
                                  +NearestOcc
                                  +RegionalCommonness
                                  , trControl = fit_control,tuneGrid = NULL,importance = 'permutation',num.threads = 12,
                                  data = TrainingRows, 
                                  method = "ranger")
  
  fit_control <- trainControl(method = "cv",number = 5,allowParallel = TRUE, seeds = seeds)
  
  rf_fitFrequency <- train(Occurrence~
                                 DCA1 + DCA2 + DCA3 + DCA4 + BeeDCA1  +  BeeDCA2  +  BeeDCA3 + BeeDCA4 + Solitary
                               + PlantFreq			   
                               + MASL 
                               + LnscpH
                               + LndscpGR
                               + DistSand
                               +NearestOcc
                               +RegionalCommonness
                               , trControl = fit_control,tuneGrid = NULL,importance = 'permutation', num.threads = 12,
                               data = TrainingRows, 
                               method = "ranger")
  
  
  rf_fitNumber <- train(Number~
                           DCA1 + DCA2 + DCA3 + DCA4 + BeeDCA1  +  BeeDCA2  +  BeeDCA3 + BeeDCA4 + Solitary
                         + PlantFreq			   
                         + MASL 
                         + LnscpH
                         + LndscpGR
                         + DistSand
                         +NearestOcc
                         +RegionalCommonness
                         , trControl = fit_control,tuneGrid = NULL,importance = 'permutation', num.threads = 12,
                         data = TrainingRows, 
                         method = "ranger")
  
  
  
  ObsvsPredicted <- data.frame(SitePlantBee = ValidationRows$SitePlantBee
                               , ObsOc = ValidationRows$Occurrence
                               , ObsNum = ValidationRows$Number
                               , PredictedOccClassification = predict(rf_fitOccurrence,ValidationRows, "prob")[,2]
                               , PredictedOccRegression = predict(rf_fitFrequency,ValidationRows)
                               , PredictedNumberRegression = predict(rf_fitNumber,ValidationRows)
  )
  return(ObsvsPredicted)}

set.seed(1234)
ListSinglePlantSpeciesValidations <- mclapply(UniquePlantSpecies, fn.SinglePlantSpeciesModel, mc.cores = 4)


dfSinglePlantSpeciesVals   <-   do.call(rbind,ListSinglePlantSpeciesValidations)




BIC(glm(ObsOc~PredictedNumberRegression,binomial,dfSinglePlantSpeciesVals)
    ,glm(ObsOc~log1p(PredictedNumberRegression),binomial,dfSinglePlantSpeciesVals)
    ,glm(ObsOc~sqrt(PredictedNumberRegression),binomial,dfSinglePlantSpeciesVals))

glmSinglePlantClassificationOcc    <- glm(ObsOc~logit(PredictedOccClassification, adjust = 0.001),binomial,dfSinglePlantSpeciesVals)
glmSinglePlantRegressionOcc    <- glm(ObsOc~logit(PredictedOccRegression, adjust = 0.001),binomial,dfSinglePlantSpeciesVals)
glmSinglePlantRegressionNum    <- glm(ObsOc~sqrt(PredictedNumberRegression),binomial,dfSinglePlantSpeciesVals)


# Get validation metrics for figure legends

## Classification RF on occurrences/absences
summary(glmSinglePlantClassificationOcc)
r.squaredLR(glmSinglePlantClassificationOcc)
auc(ObsOc~PredictedOccClassification,dfSinglePlantSpeciesVals)    


## Regression RF on occurrences/absences
summary(glmSinglePlantRegressionOcc)
r.squaredLR(glmSinglePlantRegressionOcc)
auc(ObsOc~PredictedOccRegression,dfSinglePlantSpeciesVals)



## Regression RF on number of interactions

r.squaredLR(glmSinglePlantRegressionNum)
auc(ObsOc~PredictedNumberRegression,dfSinglePlantSpeciesVals)

############# PLOT SINGLE PLANT SPECIES VALIDATIONS ##############

bmp("Figure S3.tif",width = 8, height = 10, units = "in", res = 300)
par(mfrow = c(3,2), mar = c(5,5,3,1), cex.lab = 1.5)

plot(1,ylim = c(0,1),xlim = c(0,0.8),type = 'n', xlab = "Predicted prob. of interactions", ylab = "Occurrence of bee species")
lines(seq(0,.8, by = 0.01), seq(0,.8, by = 0.01), lty = 2, lwd =2)
points(jitter(ObsOc,0.1)~PredictedOccClassification,dfSinglePlantSpeciesVals, col = rgb(1,0,0,0.2))
with(data.frame(allEffects(glmSinglePlantClassificationOcc, xlevels = 100)[[1]]),polygon(x = c(PredictedOccClassification, rev(PredictedOccClassification)),
                                                                                       y = c(lower, rev(upper)),
                                                                                       col =  rgb(0,0,1, 0.2), border = NA))

with(data.frame(allEffects(glmSinglePlantClassificationOcc, xlevels = 100)[[1]]), lines(fit~PredictedOccClassification, lwd = 2))

legend(x = 0, y = 1, legend = c(
  expression(Slope~ "= 1.04" ~ "\u00B1" ~ "0.05 se")
  ,expression(R^2 ~ "= 0.26")
  ,expression(AUC ~ "= 0.87")
), bty = 'n')
mtext("A", 3, 1, adj = 0)


plot(as.numeric(factor(ObsNum))~PredictedOccClassification,dfSinglePlantSpeciesVals, col = 'red', pch = 16, axes = FALSE, xlab = "Predicted prob. of interactions", ylab = "Number of plant-bee interactions")
plot(PredictedOccClassification~factor(ObsNum),dfSinglePlantSpeciesVals, yaxt = "n", xaxt = "n", horizontal = TRUE, ylab = "", xlab = "", col = rgb(1,1,1,0.5), add =TRUE)
axis(1, at = seq(0,1, by = 0.1))
axis(2, at =1:length(sort(unique(dfSinglePlantSpeciesVals$ObsNum))), labels = sort(unique(dfSinglePlantSpeciesVals$ObsNum)), las = 2)
with(dfSinglePlantSpeciesVals, cor(PredictedOccClassification,ObsNum))
legend("topleft", legend = c(
  expression("r = 0.24")
), bty = 'n')
mtext("B", 3, 1, adj = 0)



#### Frequency of interactions ####

plot(1,ylim = c(0,1),xlim = c(0,0.8),type = 'n', xlab = "Predicted freq. of interactions", ylab = "Occurrence of bee species")
lines(seq(0,.8, by = 0.01), seq(0,.8, by = 0.01), lty = 2, lwd =2)
points(jitter(ObsOc,0.1)~PredictedOccRegression,dfSinglePlantSpeciesVals, col = rgb(1,0,0,0.2))
with(data.frame(allEffects(glmSinglePlantRegressionOcc, xlevels = 100)[[1]]),polygon(x = c(PredictedOccRegression, rev(PredictedOccRegression)),
                                                                                   y = c(lower, rev(upper)),
                                                                                   col =  rgb(0,0,1, 0.2), border = NA))
with(data.frame(allEffects(glmSinglePlantRegressionOcc, xlevels = 100)[[1]]), lines(fit~PredictedOccRegression, lwd = 2))


legend(x = 0, y = 1, legend = c(
  expression(Slope~ "= 0.96" ~ "\u00B1" ~ "0.04 se")
  ,expression(R^2 ~ "= 0.27")
  ,expression(AUC ~ "= 0.87")
), bty = 'n')
mtext("C", 3, 1, adj = 0)



plot(as.numeric(factor(ObsNum))~PredictedOccRegression,dfSinglePlantSpeciesVals, col = 'red', pch = 16, axes = FALSE, xlab = "Predicted freq. of interactions", ylab = "Number of plant-bee interactions")
plot(PredictedOccRegression~factor(ObsNum),dfSinglePlantSpeciesVals, yaxt = "n", xaxt = "n", horizontal = TRUE, ylab = "", xlab = "", col = rgb(1,1,1,0.5), add =TRUE)

axis(1, at = seq(0,1, by = 0.1))
axis(2, at =1:length(sort(unique(dfSinglePlantSpeciesVals$ObsNum))), labels = sort(unique(dfSinglePlantSpeciesVals$ObsNum)), las = 2)
with(dfSinglePlantSpeciesVals, cor(PredictedOccRegression,ObsNum))
legend("topleft", legend = c(
  expression("r = 0.26")
), bty = 'n')
mtext("D", 3, 1, adj = 0)

# Number of interactions

plot(1,ylim = c(0,1),xlim = c(0,5),type = 'n', xlab = "Predicted number of interactions", ylab = "Occurrence of bee species")
dfIdealizedGLM <- data.frame(Presence = do.call(c,lapply(seq(0,5, 0.0001), function(x)rbinom(1,1,x))), Probability = seq(0,5, 0.0001))
dfIdealizedGLM$Presence[is.na(dfIdealizedGLM$Presence)] <- 1

IdealGLMBinomial <- glm(Presence~Probability,binomial,dfIdealizedGLM)
allEffIdealGLM <- data.frame(allEffects(IdealGLMBinomial, xlevels = 100)[[1]])
with(allEffIdealGLM, lines(fit~Probability, lty = 2, lwd = 2))
points(jitter(ObsOc,0.1)~PredictedNumberRegression,dfSinglePlantSpeciesVals, col = rgb(1,0,0,0.2))
with(data.frame(allEffects(glmSinglePlantRegressionNum, xlevels = 100)[[1]]),polygon(x = c(PredictedNumberRegression, rev(PredictedNumberRegression)),
                                                                                   y = c(lower, rev(upper)),
                                                                                   col =  rgb(0,0,1, 0.2), border = NA))
with(data.frame(allEffects(glmSinglePlantRegressionNum, xlevels = 100)[[1]]), lines(fit~PredictedNumberRegression, lwd = 2))


legend(x = 3, y = 0.8, legend = c(
  expression(R^2 ~ "= 0.19")
  ,expression(AUC ~ "= 0.85")
), bty = 'n')
mtext("E", 3, 1, adj = 0)

plot(as.numeric(factor(ObsNum))~PredictedNumberRegression,dfSinglePlantSpeciesVals, col = 'red', pch = 16, axes = FALSE, xlab = "Predicted number of interactions", ylab = "Number of plant-bee interactions")
plot(PredictedNumberRegression~factor(ObsNum),dfSinglePlantSpeciesVals, yaxt = "n", xaxt = "n", horizontal = TRUE, ylab = "", xlab = "", col = rgb(1,1,1,0.5), add =TRUE)

axis(1, at = seq(0,11, by = 1))
axis(2, at =1:length(sort(unique(dfSinglePlantSpeciesVals$ObsNum))), labels = sort(unique(dfSinglePlantSpeciesVals$ObsNum)), las = 2)

with(dfSinglePlantSpeciesVals, cor(PredictedNumberRegression,ObsNum))

legend("topright", legend = c(
  expression("r = 0.23")
), bty = 'n')
mtext("F", 3, 1, adj = 0)

dev.off()

######################################################################################################################
######################################################################################################################
##################################								                                                          ##########
##################################	FULL MODEL for making prediction maps for Fig. 4                        ##########
##################################								                                                          ##########
######################################################################################################################
######################################################################################################################    

################ RUN FULL MODEL FOR MAKING PREDICTION MAPS #########################

MetaComNetDF <-  read.csv("Sydenham et al MetaComNet data frame.csv")
MetaComNetDF$Plant <- do.call(c,lapply(strsplit(MetaComNetDF$SitePlant,"_"), function(x)x[2]))
MetaComNetDF$BeeSpecies <- do.call(rbind,strsplit(MetaComNetDF$SiteBee,"_"))[,2]


#create a list of seeds for ensuring consistent results when running models in paralell within caret
set.seed(123)
seeds <- vector(mode = "list", length = 6)
for(i in 1:6) seeds[[i]]<- sample.int(n=1000, 6)
seeds[[6]]<-sample.int(1000, 6)

fit_control <- trainControl(method = "cv",number = 5,allowParallel = TRUE, seeds = seeds)
  
rf_fitFrequencyFULLmodel <- train(Occurrence~
                             DCA1 + DCA2 + DCA3 + DCA4 + BeeDCA1  +  BeeDCA2  +  BeeDCA3 + BeeDCA4 + Solitary
                           + PlantFreq			   
                           + MASL 
                           + LnscpH
                           + LndscpGR
                           + DistSand
                           +NearestOcc
                           +RegionalCommonness
                           , trControl = fit_control,tuneGrid = NULL,importance = 'permutation', num.threads = 12,
                           data = MetaComNetDF, 
                           method = "ranger")
  
        

# CODE FOR MAKING PREDICTION MAPS #


GBIFBeeOccurrences <- read.csv("GBIF wild bee occurrence records.csv")
head(GBIFBeeOccurrences)
coordinates(GBIFBeeOccurrences) <- ~lon+lat
proj4string(GBIFBeeOccurrences) <- crs("+proj=longlat +datum=WGS84 +no_defs")
unique(GBIFBeeOccurrences$species)
GBIFBeeOccurrencesSpecies <- GBIFBeeOccurrences["species"]


StackedPredsForMAP <- stack("StackedPredsForMAP.tif")


names(StackedPredsForMAP) <- c("MASL","LnscpH","LndscpGR","DistSand", "CellID")
ValPreds <- data.frame(values(StackedPredsForMAP))
ValPreds$Lon <- coordinates(StackedPredsForMAP)[,1]
ValPreds$Lat <- coordinates(StackedPredsForMAP)[,2]


# Use Hieracium sp. as an example of Compositae, and Lotus corniculatus as an example of Leguminosae
VariableCombinationsToMap <- expand.grid(c("Hieracium sp.", "Lotus corniculatus"), c(16,50))

fn.GetPredictionMaps <- function(x){
  PlantSPtoMap <- as.character(VariableCombinationsToMap[x,1])
  PlantFreqtoMap <- VariableCombinationsToMap[x,2]

  PlantDataToAdd <- MetaComNetDF[MetaComNetDF$Plant %in% PlantSPtoMap,][1,c("Plant","PlantFreq","DCA1","DCA2","DCA3","DCA4")]
  PlantDataToAdd$PlantFreq <- PlantFreqtoMap
  fullPlantDataToAdd <- do.call(rbind,lapply(1:nrow(ValPreds), function(x){return(PlantDataToAdd)}))
  NonBeeEnvMatrix <- cbind(ValPreds,fullPlantDataToAdd)
  head(NonBeeEnvMatrix)
  coordinates(NonBeeEnvMatrix) <- ~Lon+Lat
  proj4string(NonBeeEnvMatrix) <- crs(StackedPredsForMAP)
  NonBeeEnvMatrix
  BeeSpeciesToPredict <- unique(GBIFBeeOccurrencesSpecies$species)
  mBasedSpeciesOccurrences <- spTransform(GBIFBeeOccurrencesSpecies, crs(NonBeeEnvMatrix))
  
  
  fn.EmpGetDistanceToSpeciesOcc <- function(x){
    SelectedSpeciesGBIFpoints <- mBasedSpeciesOccurrences[mBasedSpeciesOccurrences$species %in% x,]
    PointDistancesFocalSpecies <- do.call(c,lapply(1:nrow(NonBeeEnvMatrix),function(x)min(pointDistance(NonBeeEnvMatrix[x,],SelectedSpeciesGBIFpoints,latlon = FALSE))/1000))
    BeeTraitDataToAdd <- MetaComNetDF[MetaComNetDF$BeeSpecies %in% x,][1,c("BeeSpecies","RegionalCommonness", "Solitary","BeeDCA1","BeeDCA2","BeeDCA3","BeeDCA4")]
    DistToSpecies <- data.frame(	
      CellID = NonBeeEnvMatrix$CellID
      ,NearestOcc = round(PointDistancesFocalSpecies,1)
      ,BeeSpecies = rep(SelectedSpeciesGBIFpoints$species[1], nrow(NonBeeEnvMatrix))
    )
    BeeEnvMatrix <- merge(NonBeeEnvMatrix,DistToSpecies, by = "CellID")
    BeeTraitEnvMatrix <- merge(BeeEnvMatrix,BeeTraitDataToAdd, by = "BeeSpecies")
    BeeTraitEnvMatrix$PredictedOcc <- round(predict(rf_fitFrequencyFULLmodel,BeeTraitEnvMatrix),3)
    return(BeeTraitEnvMatrix)}
  

  ListPredicted <- lapply(BeeSpeciesToPredict,fn.EmpGetDistanceToSpeciesOcc)
  
  dfAllPredicted <- data.frame(do.call(cbind,lapply(ListPredicted, function(x)x["PredictedOcc"])))
  dfAllCells <- data.frame(do.call(cbind,lapply(ListPredicted, function(x)x["CellID"])))
  
  PredictionMap <- raster(StackedPredsForMAP)
  PredictionMap[] <- rowSums(dfAllPredicted[,1:39]) 
  names(PredictionMap) <- paste(PlantSPtoMap,"freq",PlantFreqtoMap, sep = "_")
  plot(PredictionMap)
  return(PredictionMap)}


AllPredictionMaps <- mclapply(1:nrow(VariableCombinationsToMap),fn.GetPredictionMaps, mc.cores = 4)
StackedPredictonMaps <- stack(AllPredictionMaps)

plot(StackedPredictonMaps)
names(StackedPredictonMaps) <- c("Compositae_freq_16","Leguminosae_freq_16","Compositae_freq_50","Leguminosae_freq_50")
StackedPredictonMaps

# LOAD ADDITIONAL FILES FOR PRODUCING FIGURE 4
# Copernicus Sentinel-2 data (2019)/processed by the Norwegian Mapping Authority
SentinelMapGardermoen <- brick("MosaicBlock_UTM32N_T32VPM.tif")
SiteLocations <- shapefile("Site locations.shp")


CroppedSentinel <- crop(SentinelMapGardermoen, extent(spTransform(SiteLocations, crs(SentinelMapGardermoen)))-1000)
ProjectedPredMap <- projectRaster(StackedPredictonMaps,CroppedSentinel) 

names(ProjectedPredMap) <- names(StackedPredictonMaps) 

CroppedSentinel2 <- crop(CroppedSentinel, extent(ProjectedPredMap))


Colour.ranges  <- data.frame(
  col = colors <- colorRampPalette(c("darkblue", "yellow"))(100)
  ,Range = seq(min(values(ProjectedPredMap[["Compositae_freq_16"]]), na.rm = TRUE),max(values(ProjectedPredMap[["Compositae_freq_50"]]), na.rm = TRUE), len = 100))

Colour.rangesLeg  <- data.frame(
  col = colors <- colorRampPalette(c("darkblue", "pink"))(100)
  ,Range = seq(min(values(ProjectedPredMap[["Leguminosae_freq_16"]]), na.rm = TRUE),max(values(ProjectedPredMap[["Leguminosae_freq_50"]]), na.rm = TRUE), len = 100))


Colour.rangesComp16 <- Colour.ranges[(Colour.ranges$Range > min(values(ProjectedPredMap[["Compositae_freq_16"]]))) & (Colour.ranges$Range < max(values(ProjectedPredMap[["Compositae_freq_16"]]))), ]
Colour.rangesComp50 <- Colour.ranges[(Colour.ranges$Range > min(values(ProjectedPredMap[["Compositae_freq_50"]]))) & (Colour.ranges$Range < max(values(ProjectedPredMap[["Compositae_freq_50"]]))), ]

Colour.rangesLeg16 <- Colour.rangesLeg[(Colour.rangesLeg$Range > min(values(ProjectedPredMap[["Leguminosae_freq_16"]]))) & (Colour.rangesLeg$Range < max(values(ProjectedPredMap[["Leguminosae_freq_16"]]))), ]
Colour.rangesLeg50 <- Colour.rangesLeg[(Colour.rangesLeg$Range > min(values(ProjectedPredMap[["Leguminosae_freq_50"]]))) & (Colour.rangesLeg$Range < max(values(ProjectedPredMap[["Leguminosae_freq_50"]]))), ]

CompColRangeForPlot <- Colour.ranges
LegColRangeForPlot <- Colour.rangesLeg

CompColRangeForPlot$PlOrder <- 1:nrow(CompColRangeForPlot)
CompColRangeForPlot$PlOrdermOne <- CompColRangeForPlot$PlOrder -1
CompColRangeForPlot$Vert2 <- 1
CompColRangeForPlot$Vert1 <- 0


LegColRangeForPlot$PlOrder <- 1:nrow(LegColRangeForPlot)
LegColRangeForPlot$PlOrdermOne <- LegColRangeForPlot$PlOrder -1
LegColRangeForPlot$Vert2 <- 1
LegColRangeForPlot$Vert1 <- 0
names(LegColRangeForPlot)

CroppedSentinel <- crop(SentinelMapGardermoen, extent(spTransform(SiteLocations, crs(SentinelMapGardermoen)))-1000)

CropExtentForPredMaps <- extent(CroppedSentinel)
CropExtentForPredMaps[4]<- 6682112
CroppedSentinelCropped <- crop(CroppedSentinel,CropExtentForPredMaps)


ProjectedPredMap <- crop(ProjectedPredMap,CropExtentForPredMaps)

Comp3rdQuant <- ProjectedPredMap[["Compositae_freq_50"]]
summary(values(Comp3rdQuant)) # 3.955 
Comp3rdQuant[values(Comp3rdQuant) < 3.955] <- NA

Leg3rdQuant  <- ProjectedPredMap[["Leguminosae_freq_50"]]
summary(values(Leg3rdQuant)) # 3.426 
Leg3rdQuant[values(Leg3rdQuant) < 3.426] <- NA


    bmp("Figure 4.tif",width = 16, height = 16.52, units = "cm", res = 300)
    layout(matrix(c(1,2,3,6
                    ,1,4,5,7
                    ,8,8,8,8
                    ,9,9,9,9), 4, 4, byrow = TRUE)
           , width = c(0.20,0.1,0.1,0.1), heights = c(0.3,0.3,0.1,0.1))
    
    par(mar = c(1,0,1,1))
    plotRGB(CroppedSentinelCropped, r = 3, g = 2, b = 1, axes = FALSE, stretch = "lin",asp = 1, margins = TRUE)
    plotRGB(CroppedSentinelCropped, r = 3, g = 2, b = 1, axes = FALSE, stretch = "hist",asp = 1, margins = TRUE, add = TRUE,alpha = 100)
    
    mtext("A",3,-2.5,adj = 0.1, col = 'white', cex = 1)
    
    par(mar = c(1,0,1,1))
    image(ProjectedPredMap[["Compositae_freq_16"]],col = as.character(Colour.rangesComp16$col), axes = FALSE, xlab = '', ylab = '')
    mtext("B",3,-2.5,adj = 0.1, col = 'white', cex = 1)
    
    image(ProjectedPredMap[["Compositae_freq_50"]],col = as.character(Colour.rangesComp50$col), axes = FALSE, xlab = '', ylab = '')
    mtext("C",3,-2.5,adj = 0.1, col = 'white', cex = 1)
    
    
    image(ProjectedPredMap[["Leguminosae_freq_16"]],col = as.character(Colour.rangesLeg16$col), axes = FALSE, xlab = '', ylab = '')
    mtext("E",3,-2.5,adj = 0.1, col = 'white', cex = 1)
    
    image(ProjectedPredMap[["Leguminosae_freq_50"]],col = as.character(Colour.rangesLeg50$col), axes = FALSE, xlab = '', ylab = '')
    mtext("F",3,-2.5,adj = 0.1, col = 'white', cex = 1)
    
    plotRGB(CroppedSentinelCropped, r = 3, g = 2, b = 1, axes = FALSE, stretch = "lin",asp = 1, margins = TRUE)
    plotRGB(CroppedSentinelCropped, r = 3, g = 2, b = 1, axes = FALSE, stretch = "hist",asp = 1, margins = TRUE, add = TRUE,alpha = 100)
    image(Comp3rdQuant,col = as.character(Colour.rangesComp50[Colour.rangesComp50$Range > min(values(Comp3rdQuant), na.rm = TRUE),]$col), axes =FALSE, add =TRUE)
    mtext("D",3,-2.5,adj = 0.1, col = 'white', cex = 1)
    
    
    plotRGB(CroppedSentinelCropped, r = 3, g = 2, b = 1, axes = FALSE, stretch = "lin",asp = 1, margins = TRUE)
    plotRGB(CroppedSentinelCropped, r = 3, g = 2, b = 1, axes = FALSE, stretch = "hist",asp = 1, margins = TRUE, add = TRUE,alpha = 100)
    image(Leg3rdQuant,col = as.character(Colour.rangesLeg50[Colour.rangesLeg50$Range > min(values(Leg3rdQuant), na.rm = TRUE),]$col), axes =FALSE, add =TRUE)
    mtext("G",3,-2.5,adj = 0.1, col = 'white', cex = 1)
    
    par(mar = c(5,1,0,1))
    plot(1,1, xlim = c(0,100), ylim = c(0,1), type = 'n', axes = FALSE, xlab = 'Compositae flower visitor richness', ylab = '', cex.lab = 1)
    apply(CompColRangeForPlot, MARGIN = 1, FUN = function(x){
      rect(x[4],0,x[3],1, col =x[1], border = x[1])
    })
    axis(1, cex.axis = 1,at = c(0,50,100), labels = c("0.7","3","5.4"))
    
    plot(1,1, xlim = c(0,100), ylim = c(0,1), type = 'n', axes = FALSE, xlab = 'Leguminosae flower visitor richness', ylab = '', cex.lab = 1)
    apply(LegColRangeForPlot, MARGIN = 1, FUN = function(x){
      rect(x[4],0,x[3],1, col =x[1], border = x[1])
    })
    axis(1, cex.axis = 1,at = c(0,50,100), labels = c("1","3","5.2"))
    
    dev.off()
    

    
### END        
